// components/ProfileMenu.js
'use client';

import { useState, useEffect, useRef } from 'react';
import Image from 'next/image';
import styled from 'styled-components';
import { signOut } from 'firebase/auth';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { auth, storage } from '@/lib/firebase';


const ProfileWrapper = styled.div`
  position: relative;
`;

const Avatar = styled.div`
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: #222;
  overflow: hidden;
  cursor: pointer;
  border: 2px solid #00FFC6;
  box-shadow: 0 0 8px rgba(0, 255, 198, 0.6);
  transition: all 0.3s ease;

  &:hover {
    transform: scale(1.05);
  }
`;

const AvatarImage = styled(Image)`
  width: 100%;
  height: 100%;
  object-fit: cover;
`;

const Dropdown = styled.div`
  position: absolute;
  top: 60px;
  right: 0;
  background: #1c1c1c;
  border: 1px solid #333;
  border-radius: 12px;
  width: 200px;
  z-index: 10;
  display: ${(props) => (props.visible ? 'block' : 'none')};
  box-shadow: 0 8px 20px rgba(0, 255, 198, 0.15);
`;

const DropdownItem = styled.div`
  padding: 12px;
  color: #fff;
  cursor: pointer;
  border-bottom: 1px solid #333;

  &:hover {
    background: #2a2a2a;
  }

  &:last-child {
    border-bottom: none;
  }
`;

const HiddenInput = styled.input`
  display: none;
`;

const ModalBackdrop = styled.div`
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.7);
  display: ${(props) => (props.visible ? 'flex' : 'none')};
  align-items: center;
  justify-content: center;
  z-index: 50;
`;

const ModalContent = styled.div`
  background: #222;
  padding: 20px;
  border-radius: 16px;
  width: 90%;
  max-width: 400px;
  color: white;
  box-shadow: 0 0 10px rgba(0, 255, 198, 0.3);
`;

const StyledButton = styled.button`
  background: linear-gradient(90deg, #00FFC6, #4A90E2);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  margin-left: 0.5rem;

  &:hover {
    background: #00ffc6;
    transform: scale(1.05);
  }
`;

export default function ProfileMenu({ user }) {
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [profilePic, setProfilePic] = useState(null);
  const fileInputRef = useRef();
  const [modalOpen, setModalOpen] = useState(false);
  const [reportText, setReportText] = useState('');

  useEffect(() => {
    if (user?.uid) {
      const picRef = ref(storage, `profilePics/${user.uid}`);
      getDownloadURL(picRef)
        .then((url) => setProfilePic(url))
        .catch(() => setProfilePic(null));
    }
  }, [user]);

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file || !user) return;

    try {
      const storageRef = ref(storage, `profilePics/${user.uid}`);
      await uploadBytes(storageRef, file);
      const url = await getDownloadURL(storageRef);
      setProfilePic(url);
    } catch (error) {
      alert('Upload failed. Try again.');
    }
  };

  const handleLogout = async () => {
    await signOut(auth);
    window.location.reload();
  };

  const handleSubmitReport = () => {
    alert(`Reported: ${reportText}`);
    setModalOpen(false);
  };

  return (
    <ProfileWrapper>
      <Avatar onClick={() => setDropdownVisible(!dropdownVisible)}>
        <AvatarImage
          src={profilePic || '/default-avatar.png'}
          alt="Profile"
          width={48}
          height={48}
        />
      </Avatar>

      <Dropdown visible={dropdownVisible}>
        <DropdownItem onClick={() => fileInputRef.current.click()}>
          Change Profile Picture
        </DropdownItem>
        <HiddenInput
          type="file"
          ref={fileInputRef}
          accept="image/*"
          onChange={handleFileUpload}
        />
        <DropdownItem onClick={() => window.location.reload()}>
          Refresh Page
        </DropdownItem>
        <DropdownItem onClick={() => setModalOpen(true)}>
          Help / Report Issue
        </DropdownItem>
        <DropdownItem onClick={handleLogout}>Logout</DropdownItem>
      </Dropdown>

      <ModalBackdrop visible={modalOpen}>
        <ModalContent>
          <h3>Report an Issue</h3>
          <textarea
            style={{ width: '100%', height: '100px', marginTop: '10px', borderRadius: '8px', padding: '10px', background: '#111', color: 'white', border: '1px solid #00FFC6' }}
            value={reportText}
            onChange={(e) => setReportText(e.target.value)}
            placeholder="Describe the issue here..."
          />
          <div style={{ marginTop: '10px', textAlign: 'right' }}>
            <StyledButton onClick={handleSubmitReport}>Submit</StyledButton>
            <StyledButton onClick={() => setModalOpen(false)}>Cancel</StyledButton>
          </div>
        </ModalContent>
      </ModalBackdrop>
    </ProfileWrapper>
  );
}
